{"version":3,"sources":["extensions/fieldCust/FieldCustFieldCustomizer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,4BAA4B,CAAC;AACjD,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AACjD,OAAO,EACL,mBAAmB,EAEpB,MAAM,sCAAsC,CAAC;AAE9C,OAAO,KAAK,OAAO,MAAM,iCAAiC,CAAC;AAC3D,OAAO,MAAM,MAAM,wCAAwC,CAAC;AAY5D,IAAM,UAAU,GAAW,0BAA0B,CAAC;AAEtD;IACU,4CAAwD;IADlE;;IAsCA,CAAC;IAlCQ,yCAAM,GAAb;QACE,0EAA0E;QAC1E,oFAAoF;QACpF,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,qDAAqD,CAAC,CAAC;QAC5E,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;QACpE,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,8EAAyE,OAAO,CAAC,KAAK,OAAG,CAAC,CAAC;QAChH,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAGM,+CAAY,GAAnB,UAAoB,KAA0C;QAC5D,yDAAyD;QACzD,6EAA6E;QAE7E,qCAAqC;QAEtC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC5C,KAAK,CAAC,UAAU,CAAC,SAAS,GAAG,sBACf,MAAM,CAAC,SAAS,+BACZ,MAAM,CAAC,IAAI,sCACJ,KAAK,CAAC,UAAU,mEACxB,KAAK,CAAC,UAAU,8CAG1B,CAAC;IACT,CAAC;IAGM,gDAAa,GAApB,UAAqB,KAA0C;QAC7D,yFAAyF;QACzF,gFAAgF;QAChF,+CAA+C;QAC/C,iBAAM,aAAa,YAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IAjCD;QADC,QAAQ;0DAQR;IAGD;QADC,QAAQ;gEAgBR;IAGD;QADC,QAAQ;iEAMR;IACH,+BAAC;CAtCD,AAsCC,CArCS,mBAAmB,GAqC5B;eAtCoB,wBAAwB","file":"FieldCustFieldCustomizer.js","sourcesContent":["import { Log } from '@microsoft/sp-core-library';\r\nimport { override } from '@microsoft/decorators';\r\nimport {\r\n  BaseFieldCustomizer,\r\n  IFieldCustomizerCellEventParameters\r\n} from '@microsoft/sp-listview-extensibility';\r\n\r\nimport * as strings from 'FieldCustFieldCustomizerStrings';\r\nimport styles from './FieldCustFieldCustomizer.module.scss';\r\n\r\n/**\r\n * If your field customizer uses the ClientSideComponentProperties JSON input,\r\n * it will be deserialized into the BaseExtension.properties object.\r\n * You can define an interface to describe it.\r\n */\r\nexport interface IFieldCustFieldCustomizerProperties {\r\n  // This is an example; replace with your own property\r\n  sampleText?: string;\r\n}\r\n\r\nconst LOG_SOURCE: string = 'FieldCustFieldCustomizer';\r\n\r\nexport default class FieldCustFieldCustomizer\r\n  extends BaseFieldCustomizer<IFieldCustFieldCustomizerProperties> {\r\n\r\n  @override\r\n  public onInit(): Promise<void> {\r\n    // Add your custom initialization to this method.  The framework will wait\r\n    // for the returned promise to resolve before firing any BaseFieldCustomizer events.\r\n    Log.info(LOG_SOURCE, 'Activated FieldCustFieldCustomizer with properties:');\r\n    Log.info(LOG_SOURCE, JSON.stringify(this.properties, undefined, 2));\r\n    Log.info(LOG_SOURCE, `The following string should be equal: \"FieldCustFieldCustomizer\" and \"${strings.Title}\"`);\r\n    return Promise.resolve();\r\n  }\r\n\r\n  @override\r\n  public onRenderCell(event: IFieldCustomizerCellEventParameters): void {\r\n    // Use this method to perform your custom cell rendering.\r\n    // const text: string = `${this.properties.sampleText}: ${event.fieldValue}`;\r\n\r\n    // event.domElement.innerText = text;\r\n\r\n   event.domElement.classList.add(styles.cell);\r\n   event.domElement.innerHTML = `\r\n   <div class='${styles.FieldCust}'>\r\n       <div class='${styles.full}'>\r\n       <div style='width: ${event.fieldValue}px; background:#0094ff; color:#c0c0c0'>\r\n           &nbsp; ${event.fieldValue}\r\n       </div>\r\n       </div>\r\n   </div>`;\r\n  }\r\n\r\n  @override\r\n  public onDisposeCell(event: IFieldCustomizerCellEventParameters): void {\r\n    // This method should be used to free any resources that were allocated during rendering.\r\n    // For example, if your onRenderCell() called ReactDOM.render(), then you should\r\n    // call ReactDOM.unmountComponentAtNode() here.\r\n    super.onDisposeCell(event);\r\n  }\r\n}\r\n"],"sourceRoot":"../../../../../src"}